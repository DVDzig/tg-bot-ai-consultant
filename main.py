import os
import json
import asyncio
import logging
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.types import BotCommand, BotCommandScopeDefault
from aiogram.client.default import DefaultBotProperties
from config_utils import TOKEN
from bot_utils import register_handlers
from aiohttp import web
import base64

# --- 1. –°–æ–∑–¥–∞–Ω–∏–µ credentials.json –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
creds_base64 = os.getenv("GOOGLE_CREDENTIALS_JSON")

if creds_base64:
    try:
        decoded = base64.b64decode(creds_base64).decode("utf-8")
        with open("credentials.json", "w") as f:
            f.write(decoded)
        print("‚úÖ credentials.json —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏–∑ base64.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ credentials.json: {e}")
else:
    print("‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_CREDENTIALS_JSON –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    
# --- 2. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- 3. –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞ Webhook ---
async def main():
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher()
    register_handlers(dp)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å")
    ], scope=BotCommandScopeDefault())
    
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç Webhook...")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Webhook
    hostname = os.getenv("RENDER_EXTERNAL_HOSTNAME")
    if not hostname:
        logging.error("‚ùå RENDER_EXTERNAL_HOSTNAME –Ω–µ –∑–∞–¥–∞–Ω")
        return
    WEBHOOK_PATH = f"/webhook/{TOKEN}"
    WEBHOOK_URL = f"https://{hostname}{WEBHOOK_PATH}"

    await bot.set_webhook(WEBHOOK_URL)
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Webhook
    async def webhook_handler(request):
        update = types.Update(**await request.json())
        await dp.feed_update(bot, update)
        return web.Response()

    # –ó–∞–ø—É—Å–∫ aiohttp —Å–µ—Ä–≤–µ—Ä–∞
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, webhook_handler)

    port = int(os.environ.get('PORT', 8000))
    print(f"üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    web.run_app(app, port=port)

    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
    while True:
        await asyncio.sleep(3600)


if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())