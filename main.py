import os
import json
import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.types import BotCommand, BotCommandScopeDefault
from aiogram.client.default import DefaultBotProperties

# --- 1. –°–æ–∑–¥–∞–Ω–∏–µ credentials.json –Ω–∞ Render ---
creds_str = os.getenv("GOOGLE_CREDENTIALS_JSON")

if creds_str:
    try:
        creds_dict = json.loads(creds_str)
        with open("credentials.json", "w") as f:
            json.dump(creds_dict, f)
        print("‚úÖ credentials.json —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ credentials.json: {e}")
else:
    print("‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_CREDENTIALS_JSON –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# --- 2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ---
from config_utils import TOKEN
from bot_utils import register_handlers

# --- 3. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- 4. –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ Webhook ---
from aiohttp import web
from aiogram import types

# –ì–ª–æ–±–∞–ª—å–Ω–æ –æ–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot = None
dp = None

async def main():
    global bot, dp
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher()

    register_handlers(dp)

    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å")
    ], scope=BotCommandScopeDefault())

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

    # --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook ---
    RENDER_HOSTNAME = os.getenv('RENDER_EXTERNAL_HOSTNAME')
    WEBHOOK_PATH = f"/webhook/{TOKEN}"
    WEBHOOK_URL = f"https://{RENDER_HOSTNAME}{WEBHOOK_PATH}"

    await bot.set_webhook(WEBHOOK_URL)
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

    # --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---
    app = web.Application()
    
    async def webhook_handler(request):
        update = types.Update(**await request.json())
        await dp.feed_update(bot, update)
        return web.Response()

    app.router.add_post(WEBHOOK_PATH, webhook_handler)

    port = int(os.environ.get('PORT', 8000))
    print(f"üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()

    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    while True:
        await asyncio.sleep(3600)


if __name__ == "__main__":
    asyncio.run(main())
