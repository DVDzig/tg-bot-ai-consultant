import logging
import asyncio
import pandas as pd
import gspread
import openai
import os
import json

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.types import LabeledPrice, PreCheckoutQuery
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from google.oauth2.service_account import Credentials
from datetime import datetime, timedelta
from openai import AsyncOpenAI
import base64

creds_base64 = os.getenv("GOOGLE_CREDENTIALS_JSON")

if creds_base64:
    try:
        decoded = base64.b64decode(creds_base64).decode("utf-8")
        with open("credentials.json", "w") as f:
            f.write(decoded)
        print("‚úÖ credentials.json —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏–∑ base64.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ credentials.json: {e}")
else:
    print("‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_CREDENTIALS_JSON –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_KEY")
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)
openai.api_key = OPENAI_API_KEY

CREDENTIALS_FILE = "credentials.json"
SHEET_ID = "1vwRZKDUWOAgjCmHd5Cea2lrGraCULkrW9G8BUlJzI0Q"
USER_SHEET_ID = "1Ialmy0K2HfIWQFYjYZP6bBFuRBoK_aHXDX6BZSPPM7k"
LOGS_FOLDER_ID = "1BAJrLKRDleaBkMomaI1c4iYYVEclk-Ab"

# –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–≤ –¥–Ω—è—Ö)
FREE_LIMIT_RESET_DAYS = {
    "–ù–æ–≤–∏—á–æ–∫": 2,
    "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π": 3,
    "–ü—Ä–æ—Ñ–∏": 7,
    "–≠–∫—Å–ø–µ—Ä—Ç": None  # –≠–∫—Å–ø–µ—Ä—Ç–∞–º –Ω–µ –Ω—É–∂–µ–Ω –ª–∏–º–∏—Ç
}

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google API
SCOPES = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=SCOPES)
client = gspread.authorize(creds)
drive_service = build("drive", "v3", credentials=creds)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
sheet = client.open_by_key(SHEET_ID).worksheet("–ü–ª–∞–Ω")
data = sheet.get_all_records(expected_headers=["–ú–æ–¥—É–ª—å", "–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã", "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"])
df_structured = pd.DataFrame(data)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()
user_state = {}

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ 
youtube_cache = {} # YouTube —Å—Å—ã–ª–æ–∫
cached_user_data = []  # –ö—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö

# --- –§—É–Ω–∫—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text=f"üìö –í—ã–±–µ—Ä–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É")],
        [KeyboardButton(text=f"üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")], [KeyboardButton(text=f"üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥")]
        [KeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã")]
    ],
    resize_keyboard=True
)

# --- –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ ---
DISCIPLINE_PROMPTS = {
    # –ü—Ä–∏–º–µ—Ä
    "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ —Å–ø–æ—Ä—Ç–∞. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–º–µ."
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
def get_keywords_for_discipline(discipline_name):
    try:
        # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å –Ω—É–∂–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–æ–π –≤ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–µ
        row = df_structured[df_structured["–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã"].str.strip().str.lower() == discipline_name.strip().lower()]
        if not row.empty:
            keywords_str = row.iloc[0].get("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", "")
            if keywords_str:
                return [kw.strip().lower() for kw in keywords_str.split(",") if kw.strip()]
        return []
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {e}")
        return []
    
# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º ---
def is_question_relevant(question, keywords):
    question_lower = question.lower()
    return any(kw in question_lower for kw in keywords)

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è YouTube-—Å—Å—ã–ª–æ–∫ ---
async def generate_youtube_links(question, count=1):
    try:
        prompt = (
            f"–ü—Ä–µ–¥–ª–æ–∂–∏ {count} —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø–æ–ª–µ–∑–Ω—ã–µ –≤–∏–¥–µ–æ YouTube –ø–æ —Ç–µ–º–µ: '{question}'. "
            "–¢–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏, –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏–π, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
        )
        response = await openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "system", "content": prompt}],
            max_tokens=300
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫: {e}")
        return ""
    
async def generate_youtube_links_cached(question, count=1):
    if question in youtube_cache:
        return youtube_cache[question]

    links = await generate_youtube_links_cached(question, count)
    youtube_cache[question] = links
    return links


# –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
def generate_discipline_prompts(df):
    prompts = {}
    for _, row in df.iterrows():
        discipline = row["–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã"]
        module = row["–ú–æ–¥—É–ª—å"]

        # –û–ø—Ä–µ–¥–µ–ª–∏–º —Å—Ç–∏–ª—å –ø–æ –º–æ–¥—É–ª—é
        if "—Ñ–∏–∑–∏—á" in module.lower():
            style = (
                "–¢—ã —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä –∏ —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ "
                f"'{discipline}'. –î–∞–π —á–µ—Ç–∫–∏–π –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏."
            )
        elif "–º–µ–¥–∏–∞" in module.lower() or "–∂—É—Ä–Ω–∞–ª–∏—Å—Ç" in module.lower():
            style = (
                f"–¢—ã –º–µ–¥–∏–∞–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '{discipline}'. "
                "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, —è—Å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –º–µ–¥–∏–∞ –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π."
            )
        elif "–∏—Å—Ç–æ—Ä–∏" in module.lower() or "—Ç–µ–æ—Ä–∏" in module.lower():
            style = (
                f"–¢—ã –Ω–∞—É—á–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '{discipline}'. "
                "–î–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π, –∞–∫–∞–¥–µ–º–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏."
            )
        else:
            style = (
                f"–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '{discipline}'. "
                "–û—Ç–≤–µ—á–∞–π –ø–æ–Ω—è—Ç–Ω–æ, –ø–æ —Å—É—Ç–∏, –ø–æ–º–æ–≥–∞–π —Å—Ç—É–¥–µ–Ω—Ç—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ç–µ–º–µ."
            )

        prompts[discipline] = style

    return prompts

# –ü–æ—Ç–æ–º –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
DISCIPLINE_PROMPTS = generate_discipline_prompts(df_structured)
    
# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞
@dp.message(F.text == "üí≥ –ö—É–ø–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã")
async def show_question_packages(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton("üì¶ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî 50‚ÇΩ")],
            [KeyboardButton("üì¶ 20 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî 90‚ÇΩ")],
            [KeyboardButton("üì¶ 50 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî 200‚ÇΩ")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤:", reply_markup=menu_keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞
@dp.message(F.text.startswith("üì¶ "))
async def handle_package_selection(message: types.Message):
    text = message.text

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–∫–µ—Ç–æ–≤
    packages = {
        "üì¶ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî 50‚ÇΩ": (10, 5000),
        "üì¶ 20 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî 90‚ÇΩ": (20, 9000),
        "üì¶ 50 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî 200‚ÇΩ": (50, 20000),
    }

    if text not in packages:
        await message.answer("–ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –º–µ–Ω—é.")
        return

    questions, price = packages[text]

    await bot.send_invoice(
        chat_id=message.chat.id,
        title="–ü–æ–∫—É–ø–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤",
        description=f"{questions} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞",
        payload=f"buy_{questions}_q",
        provider_token="381764678:TEST:17602",  # –ó–∞–º–µ–Ω–∏ –Ω–∞ –±–æ–µ–≤–æ–π —Ç–æ–∫–µ–Ω
        currency="RUB",
        prices=[LabeledPrice(label=f"{questions} –≤–æ–ø—Ä–æ—Å–æ–≤", amount=price)],
        start_parameter="buy_q"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç
    user_state[message.from_user.id]["pending_purchase"] = questions


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_q: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

# –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
@dp.message(F.successful_payment)
async def process_successful_payment(message: types.Message):
    user_id = message.from_user.id
    amount_paid = message.successful_payment.total_amount // 100

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞–∫–µ—Ç –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    questions_bought = user_state.get(user_id, {}).get("pending_purchase", 10)

    update_paid_questions(user_id, questions_bought)

    await message.answer(
        f"‚úÖ –û–ø–ª–∞—Ç–∞ {amount_paid}‚ÇΩ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
        f"–ù–∞—á–∏—Å–ª–µ–Ω–æ {questions_bought} –≤–æ–ø—Ä–æ—Å–æ–≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É.",
        reply_markup=menu_keyboard
    )

    # –û—á–∏—Å—Ç–∏–º –ø–æ–∫—É–ø–∫—É
    if user_id not in user_state:
        user_state[user_id] = {}
    user_state[user_id]["pending_purchase"] = 0


    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                chat_id=admin_id,
                text=f"üí∏ –û–ø–ª–∞—Ç–∞ –æ—Ç @{message.from_user.username} ({user_id}): {amount_paid}‚ÇΩ, {questions_bought} –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞—á–∏—Å–ª–µ–Ω–æ."
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")


# --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ---
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç üëã\n\n"
        "–Ø ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º.\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:"
    )
    await message.answer(welcome_text, reply_markup=menu_keyboard)

@dp.message(Command("gen_keys"))
async def manual_generate_keywords(message: types.Message):
    await message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–∞—á–∞—Ç–∞...")
    await generate_keywords_for_disciplines()
    await message.answer("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

# --- –í—ã–±–æ—Ä –º–æ–¥—É–ª—è ---
async def choose_module(message: types.Message):
    modules = df_structured["–ú–æ–¥—É–ª—å"].unique()
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=f"üì¶ {mod}")] for mod in modules] + [[KeyboardButton(text=f"üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å:", reply_markup=keyboard)

# –ò–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è Google Sheets (–ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –æ–Ω–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ç–∞–±–ª–∏—Ü–µ–π!)
xp_column = 10         # –ö–æ–ª–æ–Ω–∫–∞ XP
xp_today_column = 11   # XP –∑–∞ —Å–µ–≥–æ–¥–Ω—è
xp_week_column = 12    # XP –∑–∞ –Ω–µ–¥–µ–ª—é
paid_questions_column = 13
last_free_reset_column = 14

# –ê–¥–º–∏–Ω—ã (ID –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏)
ADMIN_IDS = ["150532949"]  # –î–æ–±–∞–≤—å —Å–≤–æ–π ID

# –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ ID
user_sheet = client.open_by_key("1Ialmy0K2HfIWQFYjYZP6bBFuRBoK_aHXDX6BZSPPM7k").worksheet("–õ–∏—Å—Ç1")

# –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
def load_user_data(force_reload=False):
    global cached_user_data
    if force_reload or not cached_user_data:
        cached_user_data = user_sheet.get_all_records()
    return cached_user_data


def update_user_field(row_number, column, value):
    update_user_field(row_number, column, value)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ ---
def update_paid_questions(user_id, questions, record=None):
    if not record:
        user_data = load_user_data()
        headers = user_data[0].keys()
        paid_q_index = list(headers).index("paid_questions") + 1

        for i, record in enumerate(user_data):
            if str(record.get("user_id")) == str(user_id):
                current_paid_q = int(record.get("paid_questions", 0)) if str(record.get("paid_questions", 0)).isdigit() else 0
                new_total = current_paid_q + questions
                user_sheet.update_cell(i + 2, paid_q_index, new_total)
                return
    else:
        current_paid_q = int(record.get("paid_questions", 0)) if str(record.get("paid_questions", 0)).isdigit() else 0
        new_total = current_paid_q + questions
        row_number = user_data.index(record) + 2
        user_sheet.update_cell(row_number, paid_q_index, new_total)


# --- –°—Ç–∞—Ç—É—Å—ã –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å ---
def get_status_from_questions(question_count):
    if question_count <= 10:
        return "–ù–æ–≤–∏—á–æ–∫"
    elif question_count <= 50:
        return "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
    elif question_count <= 100:
        return "–ü—Ä–æ—Ñ–∏"
    else:
        return "–≠–∫—Å–ø–µ—Ä—Ç"

def get_status_and_next_info(question_count):
    if question_count <= 10:
        return "–ù–æ–≤–∏—á–æ–∫", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", 11
    elif question_count <= 50:
        return "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "–ü—Ä–æ—Ñ–∏", 51
    elif question_count <= 100:
        return "–ü—Ä–æ—Ñ–∏", "–≠–∫—Å–ø–µ—Ä—Ç", 101
    else:
        return "–≠–∫—Å–ø–µ—Ä—Ç", None, None  # –≠–∫—Å–ø–µ—Ä—Ç ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å

def generate_progress_bar(current, total, length=10):
    if total is None:  # –≠–∫—Å–ø–µ—Ä—Ç, –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ—Ç
        return "‚ñì" * length
    filled = int(current / total * length)
    empty = length - filled
    return "‚ñì" * filled + "‚ñë" * empty

# --- –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º ---
async def show_user_profile(message: types.Message):
    user_id = message.from_user.id
    user_data = load_user_data()

    for record in user_data:
        if str(record["user_id"]) == str(user_id):
            q_count = int(record['question_count']) if str(record['question_count']).isdigit() else 0

            if str(user_id) in ADMIN_IDS:
                status = "üëë –≠–∫—Å–ø–µ—Ä—Ç"
                next_status = None
                goal = None
            else:
                status, next_status, goal = get_status_and_next_info(q_count)

            progress_bar = generate_progress_bar(q_count, goal)

            profile_info = (
                f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b> {record['username']}\n"
                f"üèÜ <b>–°—Ç–∞—Ç—É—Å:</b> {record['status']}\n"
                f"üìÖ <b>–ü–µ—Ä–≤–∞—è —Å–µ—Å—Å–∏—è:</b> {record['first_interaction']}\n"
                f"üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è:</b> {record['last_interaction']}\n"
                f"üìä <b>–ó–∞–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É:</b> {q_count}\n"
                f"üí∞ <b>–ö—É–ø–ª–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤:</b> {record.get('paid_questions', 0)}\n"  # ‚Üê –î–æ–±–∞–≤–ª–µ–Ω–æ
            )


            if next_status:
                profile_info += (
                    f"üöÄ <b>–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ:</b> {next_status} ‚Äî {q_count}/{goal} –≤–æ–ø—Ä–æ—Å–æ–≤\n"
                    f"<code>{progress_bar}</code>"
                )
            else:
                profile_info += "üëë –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞!"

            await message.answer(profile_info, parse_mode="HTML")
            return

    await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
# --- –†–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
def get_user_record(user_id):
    user_data = load_user_data()
    for row in user_data:
        if str(row["user_id"]) == str(user_id):
            return row  # –ù–∞–π–¥–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å
    return None  # –ù–µ –Ω–∞–π–¥–µ–Ω


# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π
def update_user_in_user_sheet(user_id, username, question_increment=False, discipline=None, module=None):
    load_user_data(force_reload=True)  # –û–±–Ω–æ–≤–∏–º –∫—ç—à
    user_data = load_user_data()
    row_number = None
    record = None

    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for idx, row in enumerate(user_data):
        if str(row["user_id"]) == str(user_id):
            row_number = idx + 2  # +2 –¥–ª—è —É—á—ë—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            record = row
            break

    now_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    if record:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {record}")
        
        status = record.get("status", "–ù–æ–≤–∏—á–æ–∫")
                
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞
        last_reset_str = record.get("last_free_reset", "")
        reset_days = FREE_LIMIT_RESET_DAYS.get(status, 2)

        if reset_days and last_reset_str:
            try:
                last_reset_date = datetime.strptime(last_reset_str, '%Y-%m-%d %H:%M:%S')
                if (datetime.now() - last_reset_date).days >= reset_days:
                    user_sheet.update_cell(row_number, 5, 0)  # –û–±–Ω—É–ª—è–µ–º question_count
                    user_sheet.update_cell(row_number, 14, datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
                    logging.info(f"–°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")

        # --- –õ–∏–º–∏—Ç—ã –∏ –æ–ø–ª–∞—Ç–∞ ---
        paid_questions_raw = record.get("paid_questions", 0)
        try:
            paid_questions = int(paid_questions_raw)
        except (ValueError, TypeError):
            paid_questions = 0

        q_count = int(record.get("question_count", 0))
        free_limit = FREE_QUESTION_LIMITS.get(status, 10)

        can_get_xp = False
        if str(user_id) in ADMIN_IDS:
            can_get_xp = True
        elif q_count < free_limit:
            can_get_xp = True
        elif paid_questions > 0:
            paid_questions -= 1
            user_sheet.update_cell(row_number, 13, paid_questions)  # paid_questions
            can_get_xp = True

        # –û–±–Ω–æ–≤–ª—è–µ–º last_interaction
        user_sheet.update_cell(row_number, 4, now_str)

        if question_increment and can_get_xp:
            new_q_count = q_count + 1
            user_sheet.update_cell(row_number, 5, new_q_count)  # question_count

            xp = int(record.get("xp", 0))
            xp_today = int(record.get("xp_today", 0))
            xp_week = int(record.get("xp_week", 0))

            new_xp = xp + 1
            new_xp_today = xp_today + 1
            new_xp_week = xp_week + 1

            user_sheet.update_cell(row_number, 10, new_xp)
            user_sheet.update_cell(row_number, 11, new_xp_today)
            user_sheet.update_cell(row_number, 12, new_xp_week)

            # –°—Ç–∞—Ç—É—Å
            if str(user_id) in ADMIN_IDS:
                new_status = "üëë –≠–∫—Å–ø–µ—Ä—Ç"
            else:
                new_status = get_status_from_questions(new_xp)
            if record.get("status") != new_status:
                user_sheet.update_cell(row_number, 7, new_status)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –∏ –º–æ–¥—É–ª—å
        if discipline:
            user_sheet.update_cell(row_number, 8, discipline)
        if module:
            user_sheet.update_cell(row_number, 9, module)

    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤–æ–≥–æ...")
        new_q_count = 1 if question_increment else 0
        initial_xp = new_q_count
        new_row = [
            user_id, username, now_str, now_str, new_q_count, 0,
            "üëë –≠–∫—Å–ø–µ—Ä—Ç" if str(user_id) in ADMIN_IDS else "üê£ –ù–æ–≤–∏—á–æ–∫",
            discipline or "", module or "",
            initial_xp, initial_xp, initial_xp, 0  # –î–æ–±–∞–≤–ª—è–µ–º paid_questions = 0
        ]
        new_row.append(datetime.now().strftime('%Y-%m-%d %H:%M:%S'))  # last_free_reset
        user_sheet.append_row(new_row)

# –î–æ–±–∞–≤–∏–º –ª–∏–º–∏—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
FREE_QUESTION_LIMITS = {
    "–ù–æ–≤–∏—á–æ–∫": 10,
    "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π": 20,
    "–ü—Ä–æ—Ñ–∏": 30,
    "–≠–∫—Å–ø–µ—Ä—Ç": float('inf'),  # –ë–µ–∑–ª–∏–º–∏—Ç
}

# --- –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è XP/—Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–∏ ---
def update_xp_and_status_decay(user_record, row_number):
    try:
        user_id = str(user_record["user_id"])
        xp = int(user_record.get("xp", 0))
        last_interaction_str = user_record.get("last_interaction", "")
        
        if not last_interaction_str:
            return  # –ù–µ—Ç –¥–∞—Ç—ã ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

        last_interaction = datetime.strptime(last_interaction_str, '%Y-%m-%d %H:%M:%S')
        now = datetime.now()
        days_inactive = (now - last_interaction).days

        xp_decay = 0
        if 5 <= days_inactive < 15:
            xp_decay = 5
        elif days_inactive >= 15:
            xp_decay = 10

        if xp_decay > 0:
            new_xp = max(xp - xp_decay, 0)
            user_sheet.update_cell(row_number, 10, new_xp)  # –°—Ç–æ–ª–±–µ—Ü XP
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω {days_inactive} –¥–Ω–µ–π. XP —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {xp_decay}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            new_status = get_status_from_questions(new_xp)
            user_sheet.update_cell(row_number, 7, new_status)  # –°—Ç–æ–ª–±–µ—Ü –°—Ç–∞—Ç—É—Å
            logging.info(f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {new_status}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ XP –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã

def materials_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=f"üí¨ –õ–∏—á–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç")],
            [KeyboardButton(text=f"üîô –ù–∞–∑–∞–¥ –∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º")]
        ],
        resize_keyboard=True
    )

ai_interaction_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üß© –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ–ø—Ä–æ—Å"), KeyboardButton(text="üßπ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

def profile_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
        ],
        resize_keyboard=True
    )

# ===== –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –ª–æ–≥–æ–≤ =====
def ensure_local_log_dir():
    if not os.path.exists("logs"):
        os.makedirs("logs")

def get_local_log_path(discipline):
    return os.path.join("logs", f"{discipline}.json")

def load_log_local(discipline):
    ensure_local_log_dir()
    path = get_local_log_path(discipline)
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_log_local(discipline, question, answer):
    logs = load_log_local(discipline)
    logs.append({"question": question, "answer": answer})
    path = get_local_log_path(discipline)
    with open(path, "w", encoding="utf-8") as f:
        json.dump(logs, f, ensure_ascii=False, indent=2)

def search_log_for_answer(log_data, new_question):
    for entry in log_data:
        if new_question.lower() in entry["question"].lower():
            return entry["answer"]
    return None

def upload_log_to_drive(discipline):
    path = get_local_log_path(discipline)
    file_metadata = {
        "name": f"{discipline}_log.json",
        "parents": [LOGS_FOLDER_ID],
        "mimeType": "application/json"
    }

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ—Å—Ç—å
    query = f"'{LOGS_FOLDER_ID}' in parents and name = '{discipline}_log.json'"
    results = drive_service.files().list(q=query, fields="files(id)").execute()
    for file in results.get("files", []):
        drive_service.files().delete(fileId=file["id"]).execute()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π
    media = MediaFileUpload(path, mimetype="application/json")
    drive_service.files().create(body=file_metadata, media_body=media, fields="id").execute()

# ====== –ò–ò –û—Ç–≤–µ—Ç ======
async def ask_ai_handler(message: types.Message):
    user_id = message.from_user.id
    user_state[user_id]["waiting_for_ai_question"] = True
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ.")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_state:
        user_state[user_id] = {}

    # --- –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ---
async def handle_all_messages(message: types.Message):
    user_id = message.from_user.id
    user_data = load_user_data()
    text = message.text 

    if text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        user_state[user_id] = {}
        await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard)
        return


    if text == "üîô –ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—è–º":
        await choose_module(message)
        return

    if text == "üîô –ù–∞–∑–∞–¥ –∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º":
        module_name = user_state.get(user_id, {}).get("module")
        if module_name:
            disciplines = df_structured[df_structured["–ú–æ–¥—É–ª—å"] == module_name]["–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã"].unique()
            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text=f"üìò {discipline}")] for discipline in disciplines] + [[KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—è–º")]],
                resize_keyboard=True
            )
            await message.answer(f"–í—ã–±–µ—Ä–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –≤ –º–æ–¥—É–ª–µ '{module_name}':", reply_markup=keyboard)
        else:
            await choose_module(message)
        return

    if text.startswith("üì¶ "):  # –ú–æ–¥—É–ª—å
        module_name = text.replace("üì¶ ", "").strip()
        if module_name in df_structured["–ú–æ–¥—É–ª—å"].values:
            user_state[user_id] = {"module": module_name}
            disciplines = df_structured[df_structured["–ú–æ–¥—É–ª—å"] == module_name]["–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã"].unique()
            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text=f"üìò {discipline}")] for discipline in disciplines] + [[KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—è–º")]],
                resize_keyboard=True
            )
            await message.answer(f"–í—ã–±–µ—Ä–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –≤ –º–æ–¥—É–ª–µ '{module_name}':", reply_markup=keyboard)
        return

    if text.startswith("üìò "):  # –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞
        discipline_name = text.replace("üìò ", "").strip()
        if discipline_name in df_structured["–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã"].values:
            user_state[user_id]["discipline"] = discipline_name

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
            module_name = user_state[user_id].get("module")
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ - {discipline_name}, –º–æ–¥—É–ª—å - {module_name}")
        
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –∏ –º–æ–¥—É–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ
            update_user_in_user_sheet(user_id, message.from_user.username, question_increment=False, discipline=discipline_name, module=module_name)
            load_user_data(force_reload=True)  # –û–±–Ω–æ–≤–∏–º –∫—ç—à

            await message.answer(f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '{discipline_name}':", reply_markup=materials_keyboard())
        else:
            await message.answer("–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    if text == "üí¨ –õ–∏—á–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç":
        await ask_ai_handler(message)
        return

    if text == "üßπ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å":
        user_state[user_id]["chat_history"] = []
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ò–ò:")
        return

    if text == "üß© –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ–ø—Ä–æ—Å":
        await message.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–π –∑–∞–¥–∞–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:")
        return

# --- –ï–°–õ–ò –û–ñ–ò–î–ê–ï–ú –í–û–ü–†–û–° –ö –ò–ò –° –§–ò–õ–¨–¢–†–û–ú ---
    if user_state.get(user_id, {}).get("waiting_for_ai_question"):
        question = text
        discipline = user_state[user_id].get("discipline", "").strip()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        record = get_user_record(user_id)
        if not record:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        status = record.get("status", "–ù–æ–≤–∏—á–æ–∫")
        q_count = int(record.get("question_count", 0))
        paid_questions = int(record.get("paid_questions", 0))

        free_limit = FREE_QUESTION_LIMITS.get(status, 10)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
    if str(user_id) not in ADMIN_IDS:
        if q_count >= free_limit and paid_questions <= 0:
            await message.answer("‚ùó –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
                                 "–ö—É–ø–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
            return

        if not discipline:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞ üìö.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        keywords = get_keywords_for_discipline(discipline)
        if not keywords:
            await message.answer(f"–î–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã '{discipline}' –µ—â—ë –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞
        if not is_question_relevant(question, keywords):
            await message.answer(f"‚ùó –í–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '{discipline}'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –∏–∑ –º–æ–¥—É–ª—è üìö.")
            return

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –ò–ò
        chat_history = user_state[user_id].get("chat_history", [])
        chat_history.append({"role": "user", "content": question})

        prompt = DISCIPLINE_PROMPTS.get(discipline, f"–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –≤ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '{discipline}'. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–º–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.")

        response = await openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "system", "content": prompt}] + chat_history
        )

        ai_answer = response.choices[0].message.content.strip()
        chat_history.append({"role": "assistant", "content": ai_answer})
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        user_data = load_user_data()
        status = "–ù–æ–≤–∏—á–æ–∫"
        for record in user_data:
            if str(record["user_id"]) == str(user_id):
                status = record.get("status", "–ù–æ–≤–∏—á–æ–∫")
                break

        user_state[user_id]["chat_history"] = chat_history
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ —Å—Ç–∞—Ç—É—Å—É —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if status in ["–ü—Ä–æ—Ñ–∏", "–≠–∫—Å–ø–µ—Ä—Ç"]:
            link_count = 1 if status == "–ü—Ä–æ—Ñ–∏" else 3
            video_links = await generate_youtube_links(question, count=link_count)
            links_list = video_links.strip().split("\n")
            formatted_links = "\n".join([f"{i+1}. {link}" for i, link in enumerate(links_list) if link.strip()])
            ai_answer += f"\n\nüìπ <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –≤–∏–¥–µ–æ:</b>\n{formatted_links}"


        elif status == "–≠–∫—Å–ø–µ—Ä—Ç":
            video_links = await generate_youtube_links(question, count=3)
            links_list = video_links.strip().split("\n")
            formatted_links = "\n".join([f"{i+1}. {link}" for i, link in enumerate(links_list) if link.strip()])
            ai_answer += f"\n\nüìπ <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –≤–∏–¥–µ–æ:</b>\n{formatted_links}"

        await message.answer(f"üí° {ai_answer}")
        update_user_in_user_sheet(user_id, message.from_user.username, question_increment=True)
        load_user_data(force_reload=True)  # –û–±–Ω–æ–≤–∏–º –∫—ç—à
        await message.answer("–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ai_interaction_keyboard)

        save_log_local(discipline, question, ai_answer)
        upload_log_to_drive(discipline)
        return

    if text == "üèÖ –õ–∏–¥–µ—Ä–±–æ—Ä–¥":
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=f"üèÜ –í—Å—ë –≤—Ä–µ–º—è"), KeyboardButton(text=f"üìÖ –ù–µ–¥–µ–ª—è"), KeyboardButton(text=f"üóì –°–µ–≥–æ–¥–Ω—è")],
                [KeyboardButton(text=f"üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏ –∑–∞–ª —Å–ª–∞–≤—ã:", reply_markup=keyboard)
        return

    if text in ["üèÜ –í—Å—ë –≤—Ä–µ–º—è", "üìÖ –ù–µ–¥–µ–ª—è", "üóì –°–µ–≥–æ–¥–Ω—è"]:
        user_data = load_user_data()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        now = datetime.now()

        leaderboard = []

        for user in user_data:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–æ–≤
            if str(user.get("user_id")) in ADMIN_IDS:
                continue

            xp = int(user.get("xp", 0))
            first_interaction_str = user.get("first_interaction", "")
            last_interaction_str = user.get("last_interaction", "")

            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
            try:
                first_interaction = datetime.strptime(first_interaction_str, '%Y-%m-%d %H:%M:%S')
                last_interaction = datetime.strptime(last_interaction_str, '%Y-%m-%d %H:%M:%S')
            except Exception:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–∂–∏–º—É
            if text == "üìÖ –ù–µ–¥–µ–ª—è":
                if (now - last_interaction).days > 7:
                    continue
            elif text == "üóì –°–µ–≥–æ–¥–Ω—è":
                if (now.date() != last_interaction.date()):
                    continue

            leaderboard.append((user.get("username", "–ë–µ–∑ –∏–º–µ–Ω–∏"), xp))

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ XP
        leaderboard.sort(key=lambda x: x[1], reverse=True)

        if not leaderboard:
            await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ–ø-10
        top_10 = leaderboard[:10]
        result_text = f"{text} ‚Äì –¢–æ–ø 10\n\n"
        for idx, (username, xp) in enumerate(top_10, start=1):
            result_text += f"{idx}. {username}: {xp} XP\n"

        await message.answer(result_text)
        return

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –Ω–µ –∂–¥–µ–º –≤–æ–ø—Ä–æ—Å –¥–ª—è –ò–ò
    if not user_state.get(user_id, {}).get("waiting_for_ai_question"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –∏ Dispatcher
async def create_bot():
    return Bot(token=TOKEN)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async def check_user_activity():
    while True:
        user_data = load_user_data()
        for idx, record in enumerate(user_data):
            user_id = int(record["user_id"])
            if user_id == 150532949:  # –ê–¥–º–∏–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫
                continue

            last_interaction = datetime.strptime(record["last_interaction"], '%Y-%m-%d %H:%M:%S')
            days_since_last = (datetime.now() - last_interaction).days

            current_q_count = int(record["question_count"])
            adjusted_q_count = current_q_count

            if 5 <= days_since_last < 10:
                adjusted_q_count = max(0, current_q_count - 5)
            elif days_since_last >= 10:
                adjusted_q_count = max(0, current_q_count - 10)

            if adjusted_q_count != current_q_count:
                row_number = idx + 2
                user_sheet.update_cell(row_number, 5, adjusted_q_count)  # –û–±–Ω–æ–≤–∏–º XP

                # –û–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å
                new_status = get_status_from_questions(adjusted_q_count)
                if record["status"] != new_status:
                    user_sheet.update_cell(row_number, 7, new_status)

        await asyncio.sleep(86400)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º ---
async def generate_keywords_for_disciplines():
    sheet = client.open_by_key(SHEET_ID).worksheet("–ü–ª–∞–Ω")
    data = sheet.get_all_records(expected_headers=["–ú–æ–¥—É–ª—å", "–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã", "–õ–µ–∫—Ü–∏–∏", "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏", "–¢–µ—Å—Ç—ã", "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è", "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"])
    
    for idx, row in enumerate(data):
        if not row.get("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"):  # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—É—Å—Ç–æ
            discipline = row["–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã"]
            prompt = (
                f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 50‚Äì70 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ –ø–æ–Ω—è—Ç–∏–π, –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '{discipline}'. "
                "–ü–µ—Ä–µ—á–∏—Å–ª–∏ –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π."
            )

            try:
                response = await openai_client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[{"role": "user", "content": prompt}],
                    max_tokens=500
                )
                keywords = response.choices[0].message.content.strip()

                sheet.update_cell(idx + 2, 7, keywords)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É ¬´–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞¬ª (–∏–Ω–¥–µ–∫—Å 7)
                logging.info(f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è '{discipline}'")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π –¥–ª—è '{discipline}': {e}", exc_info=True)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    bot = await create_bot()
    dp = Dispatcher()

    logging.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—ã...")

    dp.message.register(send_welcome, F.text == "/start")
    dp.message.register(choose_module, F.text == "üìö –í—ã–±–µ—Ä–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É")
    dp.message.register(show_user_profile, F.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
    dp.message.register(handle_all_messages)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ñ–æ–Ω–æ–º
    asyncio.create_task(check_user_activity())

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
