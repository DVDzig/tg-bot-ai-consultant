from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, LabeledPrice, PreCheckoutQuery
from config_utils import ADMIN_IDS
from ai_utils import generate_youtube_links
from user_utils import user_state, load_user_data, update_user_in_user_sheet, get_user_record
from sheet_utils import df_structured, get_keywords_for_discipline
from config_utils import FREE_QUESTION_LIMITS
from google_sheets_utils import update_paid_questions
from log_utils import save_log_local, upload_log_to_drive
from openai_utils import openai_client, DISCIPLINE_PROMPTS
from gdrive_utils import LOGS_FOLDER_ID

import logging
from datetime import datetime

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def materials_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=f"üí¨ –õ–∏—á–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç")],
            [KeyboardButton(text=f"üîô –ù–∞–∑–∞–¥ –∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º")]
        ],
        resize_keyboard=True
    )

ai_interaction_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text=f"üß© –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ–ø—Ä–æ—Å"), KeyboardButton(text=f"üßπ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")],
        [KeyboardButton(text=f"üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text=f"üìö –í—ã–±–µ—Ä–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É")],
        [KeyboardButton(text=f"üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"), KeyboardButton(text=f"üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥")],
        [KeyboardButton(text=f"üí≥ –ö—É–ø–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã")]
    ],
    resize_keyboard=True
)

# --- –ö–æ–º–∞–Ω–¥—ã –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è ---
async def send_welcome(message: types.Message):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç üëã\n\n"
        "–Ø ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º.\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:"
    )
    await message.answer(welcome_text, reply_markup=menu_keyboard)

async def choose_module(message: types.Message):
    modules = df_structured["–ú–æ–¥—É–ª—å"].unique()
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=f"üì¶ {mod}")] for mod in modules] + [[KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –º–æ–¥—É–ª—å:", reply_markup=keyboard)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_all_messages(message: types.Message):
    user_id = message.from_user.id
    text = message.text
    user_data = load_user_data()

    if text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        user_state[user_id] = {}
        await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard)
        return

    if text == "üìö –í—ã–±–µ—Ä–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É":
        await choose_module(message)
        return

    if text == "üîô –ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—è–º":
        await choose_module(message)
        return

    if text == "üîô –ù–∞–∑–∞–¥ –∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º":
        module_name = user_state.get(user_id, {}).get("module")
        if module_name:
            disciplines = df_structured[df_structured["–ú–æ–¥—É–ª—å"] == module_name]["–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã"].unique()
            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text=f"üìò {d}")] for d in disciplines] + [[KeyboardButton(text=f"üîô –ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—è–º")]],
                resize_keyboard=True
            )
            await message.answer(f"–í—ã–±–µ—Ä–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –≤ –º–æ–¥—É–ª–µ '{module_name}':", reply_markup=keyboard)
        else:
            await choose_module(message)
        return

    if text.startswith("üì¶ "):  # –ú–æ–¥—É–ª—å
        module_name = text.replace("üì¶ ", "").strip()
        if module_name in df_structured["–ú–æ–¥—É–ª—å"].values:
            user_state[user_id] = {"module": module_name}
            disciplines = df_structured[df_structured["–ú–æ–¥—É–ª—å"] == module_name]["–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã"].unique()
            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text=f"üìò {d}")] for d in disciplines] + [[KeyboardButton(text=f"üîô –ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—è–º")]],
                resize_keyboard=True
            )
            await message.answer(f"–í—ã–±–µ—Ä–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –≤ –º–æ–¥—É–ª–µ '{module_name}':", reply_markup=keyboard)
        return

    if text.startswith("üìò "):  # –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞
        discipline_name = text.replace("üìò ", "").strip()
        if discipline_name in df_structured["–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã"].values:
            user_state[user_id]["discipline"] = discipline_name
            module_name = user_state[user_id].get("module")
            update_user_in_user_sheet(user_id, message.from_user.username, question_increment=False, discipline=discipline_name, module=module_name)
            await message.answer(f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '{discipline_name}':", reply_markup=materials_keyboard())
        else:
            await message.answer("–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if text == "üí¨ –õ–∏—á–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç":
        user_state[user_id]["waiting_for_ai_question"] = True
        await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ.")
        return

    if text == "üßπ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å":
        user_state[user_id]["chat_history"] = []
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ò–ò:")
        return

    if text == "üß© –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ–ø—Ä–æ—Å":
        await message.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–π –∑–∞–¥–∞–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:")
        return

    # --- –†–∞–±–æ—Ç–∞ —Å –ò–ò ---
    if user_state.get(user_id, {}).get("waiting_for_ai_question"):
        await process_ai_question(message)
        return

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")

# --- –û—Ç–≤–µ—Ç –ò–ò ---
async def process_ai_question(message: types.Message):
    user_id = message.from_user.id
    question = message.text
    discipline = user_state[user_id].get("discipline", "")
    if not discipline:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    record, row_number = get_user_record(user_id)
    if not record:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è.")
        return

    try:
        status = record.get("status", "–ù–æ–≤–∏—á–æ–∫")
        q_count = int(record.get("question_count", 0) or 0)
        raw_value = record.get("paid_questions", "0")
        paid_questions = int(raw_value) if raw_value.strip().isdigit() else 0
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return

    free_limit = FREE_QUESTION_LIMITS.get(status, 10)

    if str(user_id) not in ADMIN_IDS and q_count >= free_limit and paid_questions <= 0:
        await message.answer("‚ùó –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω. –ö—É–ø–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.")
        return

    keywords = get_keywords_for_discipline(discipline)
    if not any(kw in question.lower() for kw in keywords):
        await message.answer(f"‚ùó –í–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '{discipline}'. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.")
        return

    chat_history = user_state[user_id].get("chat_history", [])
    chat_history.append({"role": "user", "content": question})

    prompt = DISCIPLINE_PROMPTS.get(discipline, f"–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –≤ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '{discipline}'. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–º–µ.")
    response = await openai_client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "system", "content": prompt}] + chat_history
    )

    ai_answer = response.choices[0].message.content.strip()
    chat_history.append({"role": "assistant", "content": ai_answer})
    user_state[user_id]["chat_history"] = chat_history

    if status in ["–ü—Ä–æ—Ñ–∏", "–≠–∫—Å–ø–µ—Ä—Ç"]:
        link_count = 1 if status == "–ü—Ä–æ—Ñ–∏" else 3
        video_links = await generate_youtube_links(question, link_count)
        links_list = video_links.strip().split("\n")
        formatted_links = "\n".join([f"{i+1}. {link}" for i, link in enumerate(links_list) if link.strip()])
        ai_answer += f"\n\nüìπ <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –≤–∏–¥–µ–æ:</b>\n{formatted_links}"

    await message.answer(f"üí° {ai_answer}", parse_mode="HTML")
    update_user_in_user_sheet(user_id, message.from_user.username, question_increment=True)
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ai_interaction_keyboard)

    save_log_local(discipline, question, ai_answer)
    upload_log_to_drive(discipline)

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ---
def setup_bot_handlers(router: Router):
    router.message.register(send_welcome, Command("start"))
    router.message.register(handle_all_messages)
